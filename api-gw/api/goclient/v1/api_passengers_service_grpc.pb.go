// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassengersServiceClient is the client API for PassengersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassengersServiceClient interface {
	CreatePassenger(ctx context.Context, in *CreatePassengerRequest, opts ...grpc.CallOption) (*CreatePassengerResponse, error)
	ListPassengers(ctx context.Context, in *ListPassengersRequest, opts ...grpc.CallOption) (*ListPassengersResponse, error)
}

type passengersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassengersServiceClient(cc grpc.ClientConnInterface) PassengersServiceClient {
	return &passengersServiceClient{cc}
}

func (c *passengersServiceClient) CreatePassenger(ctx context.Context, in *CreatePassengerRequest, opts ...grpc.CallOption) (*CreatePassengerResponse, error) {
	out := new(CreatePassengerResponse)
	err := c.cc.Invoke(ctx, "/api.passengers.v1.PassengersService/CreatePassenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passengersServiceClient) ListPassengers(ctx context.Context, in *ListPassengersRequest, opts ...grpc.CallOption) (*ListPassengersResponse, error) {
	out := new(ListPassengersResponse)
	err := c.cc.Invoke(ctx, "/api.passengers.v1.PassengersService/ListPassengers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassengersServiceServer is the server API for PassengersService service.
// All implementations should embed UnimplementedPassengersServiceServer
// for forward compatibility
type PassengersServiceServer interface {
	CreatePassenger(context.Context, *CreatePassengerRequest) (*CreatePassengerResponse, error)
	ListPassengers(context.Context, *ListPassengersRequest) (*ListPassengersResponse, error)
}

// UnimplementedPassengersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPassengersServiceServer struct {
}

func (UnimplementedPassengersServiceServer) CreatePassenger(context.Context, *CreatePassengerRequest) (*CreatePassengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassenger not implemented")
}
func (UnimplementedPassengersServiceServer) ListPassengers(context.Context, *ListPassengersRequest) (*ListPassengersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengers not implemented")
}

// UnsafePassengersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassengersServiceServer will
// result in compilation errors.
type UnsafePassengersServiceServer interface {
	mustEmbedUnimplementedPassengersServiceServer()
}

func RegisterPassengersServiceServer(s grpc.ServiceRegistrar, srv PassengersServiceServer) {
	s.RegisterService(&PassengersService_ServiceDesc, srv)
}

func _PassengersService_CreatePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengersServiceServer).CreatePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.passengers.v1.PassengersService/CreatePassenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengersServiceServer).CreatePassenger(ctx, req.(*CreatePassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassengersService_ListPassengers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassengersServiceServer).ListPassengers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.passengers.v1.PassengersService/ListPassengers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassengersServiceServer).ListPassengers(ctx, req.(*ListPassengersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassengersService_ServiceDesc is the grpc.ServiceDesc for PassengersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassengersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.passengers.v1.PassengersService",
	HandlerType: (*PassengersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePassenger",
			Handler:    _PassengersService_CreatePassenger_Handler,
		},
		{
			MethodName: "ListPassengers",
			Handler:    _PassengersService_ListPassengers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/api_passengers_service.proto",
}
