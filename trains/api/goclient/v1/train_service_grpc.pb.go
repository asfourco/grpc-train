// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainsServiceClient is the client API for TrainsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainsServiceClient interface {
	CreateTrain(ctx context.Context, in *CreateTrainRequest, opts ...grpc.CallOption) (*CreateTrainResponse, error)
	ListTrains(ctx context.Context, in *ListTrainsRequest, opts ...grpc.CallOption) (*ListTrainsResponse, error)
}

type trainsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainsServiceClient(cc grpc.ClientConnInterface) TrainsServiceClient {
	return &trainsServiceClient{cc}
}

func (c *trainsServiceClient) CreateTrain(ctx context.Context, in *CreateTrainRequest, opts ...grpc.CallOption) (*CreateTrainResponse, error) {
	out := new(CreateTrainResponse)
	err := c.cc.Invoke(ctx, "/trains.v1.TrainsService/CreateTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainsServiceClient) ListTrains(ctx context.Context, in *ListTrainsRequest, opts ...grpc.CallOption) (*ListTrainsResponse, error) {
	out := new(ListTrainsResponse)
	err := c.cc.Invoke(ctx, "/trains.v1.TrainsService/ListTrains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainsServiceServer is the server API for TrainsService service.
// All implementations must embed UnimplementedTrainsServiceServer
// for forward compatibility
type TrainsServiceServer interface {
	CreateTrain(context.Context, *CreateTrainRequest) (*CreateTrainResponse, error)
	ListTrains(context.Context, *ListTrainsRequest) (*ListTrainsResponse, error)
	mustEmbedUnimplementedTrainsServiceServer()
}

// UnimplementedTrainsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainsServiceServer struct {
}

func (UnimplementedTrainsServiceServer) CreateTrain(context.Context, *CreateTrainRequest) (*CreateTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrain not implemented")
}
func (UnimplementedTrainsServiceServer) ListTrains(context.Context, *ListTrainsRequest) (*ListTrainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrains not implemented")
}
func (UnimplementedTrainsServiceServer) mustEmbedUnimplementedTrainsServiceServer() {}

// UnsafeTrainsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainsServiceServer will
// result in compilation errors.
type UnsafeTrainsServiceServer interface {
	mustEmbedUnimplementedTrainsServiceServer()
}

func RegisterTrainsServiceServer(s grpc.ServiceRegistrar, srv TrainsServiceServer) {
	s.RegisterService(&TrainsService_ServiceDesc, srv)
}

func _TrainsService_CreateTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainsServiceServer).CreateTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trains.v1.TrainsService/CreateTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainsServiceServer).CreateTrain(ctx, req.(*CreateTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainsService_ListTrains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainsServiceServer).ListTrains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trains.v1.TrainsService/ListTrains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainsServiceServer).ListTrains(ctx, req.(*ListTrainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainsService_ServiceDesc is the grpc.ServiceDesc for TrainsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trains.v1.TrainsService",
	HandlerType: (*TrainsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrain",
			Handler:    _TrainsService_CreateTrain_Handler,
		},
		{
			MethodName: "ListTrains",
			Handler:    _TrainsService_ListTrains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/train_service.proto",
}
